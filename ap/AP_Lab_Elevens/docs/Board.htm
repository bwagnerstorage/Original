<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_05) on Tue Jan 01 09:46:15 MST 2013 -->
<title>Board</title>
<meta name="date" content="2013-01-01">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Board";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
<div class="aboutLanguage"><em><b>Elevens Activity 10</em></div>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="Card.html" title="class in &lt;Unnamed&gt;"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?Board.html" target="_top">Frames</a></li>
<li><a href="Board.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<h2 title="Class Board" class="title">Class Board</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>Board</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>Direct Known Subclasses:</dt>
<dd><a href="ElevensBoard.html" title="class in &lt;Unnamed&gt;">ElevensBoard</a>, <a href="ThirteensBoard.html" title="class in &lt;Unnamed&gt;">ThirteensBoard</a></dd>
</dl>
<hr>
<br>
<pre>public abstract class <span class="strong">Board</span>
extends java.lang.Object</pre>
<div class="block">This class represents a Board that can be used in a collection
 of solitaire games similar to Elevens.  The variants differ in
 card removal and the board size.</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="Card.html" title="class in &lt;Unnamed&gt;">Card</a>[]</code></td>
<td class="colLast"><code><strong><a href="Board.html#cards">cards</a></strong></code>
<div class="block">The cards on this board.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="Deck.html" title="class in &lt;Unnamed&gt;">Deck</a></code></td>
<td class="colLast"><code><strong><a href="Board.html#deck">deck</a></strong></code>
<div class="block">The deck of cards being used to play the current game.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static boolean</code></td>
<td class="colLast"><code><strong><a href="Board.html#I_AM_DEBUGGING">I_AM_DEBUGGING</a></strong></code>
<div class="block">Flag used to control debugging print statements.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="Board.html#Board(int, java.lang.String[], java.lang.String[], int[])">Board</a></strong>(int&nbsp;size,
     java.lang.String[]&nbsp;ranks,
     java.lang.String[]&nbsp;suits,
     int[]&nbsp;pointValues)</code>
<div class="block">Creates a new <code>Board</code> instance.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>abstract boolean</code></td>
<td class="colLast"><code><strong><a href="Board.html#anotherPlayIsPossible()">anotherPlayIsPossible</a></strong>()</code>
<div class="block">Method to be completed by the concrete class that determines
 if there are any legal plays left on the board.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="Card.html" title="class in &lt;Unnamed&gt;">Card</a></code></td>
<td class="colLast"><code><strong><a href="Board.html#cardAt(int)">cardAt</a></strong>(int&nbsp;k)</code>
<div class="block">Accesses a card on the board.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="Board.html#cardIndexes()">cardIndexes</a></strong>()</code>
<div class="block">Gets the indexes of the actual (non-null) cards on the board.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="Board.html#deal(int)">deal</a></strong>(int&nbsp;k)</code>
<div class="block">Deal a card to the kth position in this board.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private void</code></td>
<td class="colLast"><code><strong><a href="Board.html#dealMyCards()">dealMyCards</a></strong>()</code>
<div class="block">Deal cards to this board to start the game.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="Board.html#deckSize()">deckSize</a></strong>()</code>
<div class="block">Accesses the deck's size.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="Board.html#gameIsWon()">gameIsWon</a></strong>()</code>
<div class="block">Determine whether or not the game has been won,
 i.e.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="Board.html#isEmpty()">isEmpty</a></strong>()</code>
<div class="block">Determines if the board is empty (has no cards).</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>abstract boolean</code></td>
<td class="colLast"><code><strong><a href="Board.html#isLegal(java.util.List)">isLegal</a></strong>(java.util.List&lt;java.lang.Integer&gt;&nbsp;selectedCards)</code>
<div class="block">Method to be completed by the concrete class that determines
 if the selected cards form a valid group for removal.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="Board.html#newGame()">newGame</a></strong>()</code>
<div class="block">Start a new game by shuffling the deck and
 dealing some cards to this board.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="Board.html#replaceSelectedCards(java.util.List)">replaceSelectedCards</a></strong>(java.util.List&lt;java.lang.Integer&gt;&nbsp;selectedCards)</code>
<div class="block">Replaces selected cards on the board by dealing new cards.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="Board.html#size()">size</a></strong>()</code>
<div class="block">Accesses the size of the board.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="Board.html#toString()">toString</a></strong>()</code>
<div class="block">Generates and returns a string representation of this board.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="I_AM_DEBUGGING">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>I_AM_DEBUGGING</h4>
<pre>private static final&nbsp;boolean I_AM_DEBUGGING</pre>
<div class="block">Flag used to control debugging print statements.</div>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="constant-values.html#Board.I_AM_DEBUGGING">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="cards">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cards</h4>
<pre>private&nbsp;<a href="Card.html" title="class in &lt;Unnamed&gt;">Card</a>[] cards</pre>
<div class="block">The cards on this board.</div>
</li>
</ul>
<a name="deck">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>deck</h4>
<pre>private&nbsp;<a href="Deck.html" title="class in &lt;Unnamed&gt;">Deck</a> deck</pre>
<div class="block">The deck of cards being used to play the current game.</div>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Board(int, java.lang.String[], java.lang.String[], int[])">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Board</h4>
<pre>public&nbsp;Board(int&nbsp;size,
     java.lang.String[]&nbsp;ranks,
     java.lang.String[]&nbsp;suits,
     int[]&nbsp;pointValues)</pre>
<div class="block">Creates a new <code>Board</code> instance.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>size</code> - the number of cards in the board</dd><dd><code>ranks</code> - the names of the card ranks needed to create the deck</dd><dd><code>suits</code> - the names of the card suits needed to create the deck</dd><dd><code>pointValues</code> - the integer values of the cards needed to create
                    the deck</dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="newGame()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>newGame</h4>
<pre>public&nbsp;void&nbsp;newGame()</pre>
<div class="block">Start a new game by shuffling the deck and
 dealing some cards to this board.</div>
</li>
</ul>
<a name="size()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>size</h4>
<pre>public&nbsp;int&nbsp;size()</pre>
<div class="block">Accesses the size of the board.
 Note that this is not the number of cards it contains,
 which will be smaller near the end of a winning game.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>the size of the board</dd></dl>
</li>
</ul>
<a name="isEmpty()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isEmpty</h4>
<pre>public&nbsp;boolean&nbsp;isEmpty()</pre>
<div class="block">Determines if the board is empty (has no cards).</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>true if this board is empty; false otherwise.</dd></dl>
</li>
</ul>
<a name="deal(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>deal</h4>
<pre>public&nbsp;void&nbsp;deal(int&nbsp;k)</pre>
<div class="block">Deal a card to the kth position in this board.
 If the deck is empty, the kth card is set to null.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>k</code> - the index of the card to be dealt.</dd></dl>
</li>
</ul>
<a name="deckSize()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>deckSize</h4>
<pre>public&nbsp;int&nbsp;deckSize()</pre>
<div class="block">Accesses the deck's size.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>the number of undealt cards left in the deck.</dd></dl>
</li>
</ul>
<a name="cardAt(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cardAt</h4>
<pre>public&nbsp;<a href="Card.html" title="class in &lt;Unnamed&gt;">Card</a>&nbsp;cardAt(int&nbsp;k)</pre>
<div class="block">Accesses a card on the board.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>k</code> - is the board position of the card to return.</dd>
<dt><span class="strong">Returns:</span></dt><dd>the card at position k on the board.</dd></dl>
</li>
</ul>
<a name="replaceSelectedCards(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>replaceSelectedCards</h4>
<pre>public&nbsp;void&nbsp;replaceSelectedCards(java.util.List&lt;java.lang.Integer&gt;&nbsp;selectedCards)</pre>
<div class="block">Replaces selected cards on the board by dealing new cards.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>selectedCards</code> - is a list of the indices of the
        cards to be replaced.</dd></dl>
</li>
</ul>
<a name="cardIndexes()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cardIndexes</h4>
<pre>public&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;cardIndexes()</pre>
<div class="block">Gets the indexes of the actual (non-null) cards on the board.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>a List that contains the locations (indexes)
         of the non-null entries on the board.</dd></dl>
</li>
</ul>
<a name="toString()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
<div class="block">Generates and returns a string representation of this board.</div>
<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
<dt><span class="strong">Returns:</span></dt><dd>the string version of this board.</dd></dl>
</li>
</ul>
<a name="gameIsWon()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>gameIsWon</h4>
<pre>public&nbsp;boolean&nbsp;gameIsWon()</pre>
<div class="block">Determine whether or not the game has been won,
 i.e. neither the board nor the deck has any more cards.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>true when the current game has been won;
         false otherwise.</dd></dl>
</li>
</ul>
<a name="isLegal(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isLegal</h4>
<pre>public abstract&nbsp;boolean&nbsp;isLegal(java.util.List&lt;java.lang.Integer&gt;&nbsp;selectedCards)</pre>
<div class="block">Method to be completed by the concrete class that determines
 if the selected cards form a valid group for removal.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>selectedCards</code> - the list of the indices of the selected cards.</dd>
<dt><span class="strong">Returns:</span></dt><dd>true if the selected cards form a valid group for removal;
         false otherwise.</dd></dl>
</li>
</ul>
<a name="anotherPlayIsPossible()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>anotherPlayIsPossible</h4>
<pre>public abstract&nbsp;boolean&nbsp;anotherPlayIsPossible()</pre>
<div class="block">Method to be completed by the concrete class that determines
 if there are any legal plays left on the board.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>true if there is a legal play left on the board;
         false otherwise.</dd></dl>
</li>
</ul>
<a name="dealMyCards()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>dealMyCards</h4>
<pre>private&nbsp;void&nbsp;dealMyCards()</pre>
<div class="block">Deal cards to this board to start the game.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="deprecated-list.html">Deprecated</a></li>
<li><a href="index-all.html">Index</a></li>
<li><a href="help-doc.html">Help</a></li>
</ul>
<div class="aboutLanguage"><em><b>&copy 2012 The College Board</b><BR>All rights reserved.</em></div>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="Card.html" title="class in &lt;Unnamed&gt;"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="index.html?Board.html" target="_top">Frames</a></li>
<li><a href="Board.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
